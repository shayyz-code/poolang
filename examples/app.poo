use std::(
    pout,
    poutln
);
use math::PI;

poo my_vec vec:str = ["world", "hello"];
poo a float = 5.0 * 1.0 - 1.0 * 3.0;
poo b int = 2 / 2;
mut d bool = true; // hello //
d = false;
poo e map = {name: "amk", age: 1};
pout(e);
pout(e.name);

if not d {
    pout("d is not true");
}

poof getHelloWorld (a vec:char) >> vec:char {
    return a;
}

poutln(getHelloWorld(['k']) otherwise "this is a no");

poof sayHello () {
    poo hello str = "Hello,";
    poo space char = 'y';
    poo world str = "World!";
    poo author str = "Shayy";
    if hello == "Hello," and space == 'h' or world == "World!" {
        //hi//
        pout(hello);
    } elif author != "Shayy" {
        pout(author);
    } else {
        pout("nth");
    }
    
}

// Hello World this is a comment //


for item in my_vec {
    pout("Hello, Poo!", item);
}

my_vec.pop();
my_vec.push("Alan");
sayHello();
pout(a.sin(), a.cos());
pout("a");
pout("b");

pout(getHelloWorld(['h']) otherwise "Otherwise does not work");